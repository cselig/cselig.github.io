---
layout: post
title: Messing Around with three.js
date: 2020-04-23 00:00:00 -0800
categories: [blog]
---

Making some 3D stuff.

<!--excerpt-->

<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/110/three.min.js"></script>

<style>
.canvas {
  width: 400px;
  height: 400px;
  margin: 20px auto;
}

.container {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.container button {
  margin: 10px 0;
  font-size: 12px;
}
</style>

### Spinning Box

A classic: the spinning box.

<div id="spinning-box-container" class="canvas"></div>

<script>
{
{% include blog/three/spinning_box.js %}
}
</script>

{% include expandable_code_container.html path="blog/three/spinning_box.js" %}

### Sine Wave

Rectangles moving in a sine wave.

<style>
#sine-wave-container .selectors {
  display: flex;
}

#sine-wave-container .selectors .selector {
  display: flex;
  flex-direction: column;
  align-items: center;
  margin: 0 20px;
}
</style>

<div id="sine-wave-container" class="container">
  <div class="selectors">
    <div class="selector">
      <p>Frequency:</p>
      <input name="frequency" type="range"/>
    </div>
    <div class="selector">
      <p>Number of cubes:</p>
      <input name="ncubes" type="range" min="4" max="14"/>
    </div>
  </div>
  <div class="canvas"></div>
</div>

<script>
{
{% include blog/three/sine_wave.js %}
}
</script>

{% include expandable_code_container.html path="blog/three/sine_wave.js" %}

### Pipes Screensaver

I came across a GIF of the old "pipes" screensaver from Windows '95 and thought it would be fun to make.
It ended up being a fun challenge, and involved implementing some tricky vector math. I haven't yet gotten around
to the hardest part though, which is making sure the pipes don't intersect themselves.

When I first coded this up, I noticed that the memory usage of the browser would skyrocket. There are a few things I tried to reduce memory usage:

<b>Stopping the animation:</b>
Once we've animated all the pipes that we want, the render loop should ideally stop so we're not re-rendering a
static scene. This can be done with <code>cancelAnimationFrame</code>.

<div class="code-container">
{% highlight js %}
let animationRequestId;

const animate = function() {
  animationRequestId = requestAnimationFrame(animate);

  // do rendering

  if (stop_condition) {
    cancelAnimationFrame(animationRequestId);
  }
}
{% endhighlight %}
</div>

<b>Pooling materials:</b>
Since every pipe segment will use the same material (only color changes between pipes), we can create a pool
of these materials and reuse them across pipe segments, instead of instantiating a new material for every object
in the scene.

<div class="code-container">
{% highlight js %}
const colors = [
  0x3182bd, // blue
  0x229954, // green
  0xF08080, // coral
];
let materials = [];
for (const color of colors) {
  materials.push(new THREE.MeshStandardMaterial({color: color}));
}

const createCylinder = function() {
  let geometry = new THREE.CylinderGeometry(R, R, 0, RADIAL_SEGMENTS);
  let material = materials[numPipes];
  let mesh = new THREE.Mesh(geometry, material);
  scene.add(mesh);
  return mesh;
}
{% endhighlight %}
</div>

<div id="pipes-container" class="container">
  <button name="start">Start/Reset</button>
  <div class="canvas"></div>
</div>

<script>
{
{% include blog/three/pipes.js %}
}
</script>

{% include expandable_code_container.html path="blog/three/pipes.js" %}
