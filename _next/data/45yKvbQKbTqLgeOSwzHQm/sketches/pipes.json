{"pageProps":{"sketchData":{"id":"pipes","contentHtml":"<p>I came across a GIF of the old \"pipes\" screensaver from Windows '95 and thought it would be fun to make.\nIt ended up being a fun challenge, and involved implementing some vector math. I haven't yet gotten around\nto the hardest part though, which is making sure the pipes don't intersect themselves.</p>\n","code":"import React from 'react'\nimport * as THREE from 'three'\nimport * as d3 from 'd3'\n\nimport styles from '../../styles/sketches/pipes.module.scss'\n\nclass Pipes extends React.Component {\n  render() {\n    return (\n      <div id=\"pipes-container\" className={styles.container}>\n        <button name=\"start\">Start/Reset</button>\n        <div style={{display: \"flex\", alignItems: \"center\"}}>\n          <p>Rotate Camera:</p>\n          <input type=\"checkbox\" name=\"toggle-rotate\"/>\n        </div>\n        <div className={styles.canvas + \" canvas\"}></div>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    let container = d3.select(\"#pipes-container .canvas\").node(),\n        bbox = container.getBoundingClientRect();\n\n    let scene, camera;\n\n    let renderer = new THREE.WebGLRenderer();\n    renderer.setPixelRatio(window.devicePixelRatio);\n\n    renderer.setSize(bbox.width, bbox.height);\n    container.appendChild(renderer.domElement);\n\n    const SPEED = 3, // units/frame\n          R = 1, // cylinder radius\n          L = 80, // size of cube boundary\n          RADIAL_SEGMENTS = 32,\n          MAX_SEGMENTS = 70, // max segments per pipe\n          MIN_LENGTH = 5, // min length of a pipe segment\n          MAX_LENGTH = 20,\n          CUBE_CENTER = [L/2, L/2, L/2];\n\n    const initialPositions = [\n      [L/2, 0, L/2],\n      [3/4*L, 3/4*L, 0],\n      [L/2, L, L/2],\n    ];\n    const colors = [\n      0x3182bd, // blue\n      0x229954, // green\n      0xF08080, // coral\n    ];\n    const MAX_PIPES = colors.length;\n    let materials = [];\n    for (const color of colors) {\n      materials.push(new THREE.MeshStandardMaterial({color: color}));\n    }\n\n    const bounds = new THREE.Box3(new THREE.Vector3(0, 0, 0), new THREE.Vector3(L, L, L));\n\n    // utils\n    const randInt = function(min, max) {\n      return Math.floor(Math.random() * (max - min)) + min;\n    }\n\n    const randChoice = function(arr) {\n      return arr[Math.floor(Math.random()*arr.length)];\n    }\n\n    const newDirection = function(old_dir, position) {\n      // return a new direction vector such that:\n      //   - new direction is orthogonal to old direction\n      //   - a pipe going in new_direction with MAX_LENGTH will stay in bounds\n      let validDirs = directions.filter((new_dir) => {\n        return (vector_dot(old_dir, new_dir) === 0) &&\n              willBeInBounds(new_dir, position)\n      });\n      return randChoice(validDirs);\n    }\n\n    const willBeInBounds = function(dir, position) {\n      const end_position = vector_add(position, vector_scale(dir, MAX_LENGTH + 2));\n      return bounds.containsPoint(new THREE.Vector3(...end_position));\n    }\n\n    // utility functions for working with vectors\n    // could probably make this cleaner by not converting between\n    // js lists and THREE.Vector3's\n    const pos_to_vec = function(pos) {\n      return [pos.x, pos.y, pos.z];\n    }\n\n    const vector_scale = function(v, s) {\n      let result = [];\n      for (let i = 0; i < v.length; i++) {\n        result.push(v[i] * s);\n      }\n      return result;\n    }\n\n    const vector_add = function(v1, v2) {\n      let result = [];\n      for (let i = 0; i < v1.length; i++) {\n        result.push(v1[i] + v2[i]);\n      }\n      return result;\n    }\n\n    const vector_dot = function(v1, v2) {\n      let result = 0;\n      for (let i = 0; i < v1.length; i++) {\n        result += v1[i] * v2[i];\n      }\n      return result;\n    }\n\n    const createCylinder = function() {\n      let geometry = new THREE.CylinderGeometry(R, R, 0, RADIAL_SEGMENTS);\n      let material = materials[numPipes];\n      let mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      return mesh;\n    }\n\n    const createSphere = function() {\n      let geometry = new THREE.SphereGeometry(R * 1.2, RADIAL_SEGMENTS, RADIAL_SEGMENTS);\n      let material = new THREE.MeshStandardMaterial({color: colors[numPipes]});\n      let mesh = new THREE.Mesh(geometry, material);\n      scene.add(mesh);\n      return mesh;\n    }\n\n    const rotateCylinder = function(c) {\n      if (Math.abs(c.direction[0]) === 1) {\n        c.mesh.rotateZ(Math.PI / 2);\n      } else if (Math.abs(c.direction[2]) === 1) {\n        c.mesh.rotateX(Math.PI / 2);\n      }\n    }\n\n    const computeCameraPos = function() {\n      const x = L * 1.5 * Math.sin(theta);\n      const y = L * 1.5 * (Math.cos(theta) + 1);\n      return [x, L/2, y];\n    }\n\n    const updateCamera = function() {\n      camera.position.set(...computeCameraPos())\n      camera.lookAt(...CUBE_CENTER)\n    }\n\n    const directions = [\n      [1, 0, 0],\n      [0, 1, 0],\n      [0, 0, 1],\n      [-1, 0, 0],\n      [0, -1, 0],\n      [0, 0, -1],\n    ]\n\n    let numSegments; // number of pipe segments that have been created\n    let numPipes; // number of pipes that have been created\n    let c; // keeps track of the current cylinder segment\n    let theta = 8; // current camera rotation\n    let omega = 0.01; // rotational speed\n    let rotateCamera = false;\n\n    let animationRequestId;\n\n    const animate = function() {\n      animationRequestId = requestAnimationFrame(animate);\n\n      if (c.length < c.max_length) {\n        c.length += SPEED;\n        c.mesh.geometry.dispose();\n        c.mesh.geometry = new THREE.CylinderGeometry(R, R, c.length, RADIAL_SEGMENTS);\n        // need to make sure cylinder only grows in one direction\n        const old_pos = pos_to_vec(c.mesh.position);\n        const new_pos = vector_add(old_pos, vector_scale(c.direction, SPEED/2));\n        c.mesh.position.set(...new_pos);\n      } else if (numSegments++ < MAX_SEGMENTS) {\n        // new pipe segment\n        const end_position = vector_add(pos_to_vec(c.mesh.position), vector_scale(c.direction, c.length/2));\n        const old_pos = pos_to_vec(c.mesh.position);\n        const new_pos = vector_add(old_pos, vector_scale(c.direction, c.length/2));\n        c = {\n          length: 0,\n          direction: newDirection(c.direction, end_position),\n          max_length: randInt(MIN_LENGTH, MAX_LENGTH),\n          mesh: createCylinder(),\n        }\n        c.mesh.position.set(...new_pos);\n        rotateCylinder(c);\n        // create sphere at junction\n        let sphere = createSphere();\n        sphere.position.set(...new_pos);\n      } else if (numPipes < MAX_PIPES) {\n        // finish the old pipe with a sphere\n        const position = vector_add(pos_to_vec(c.mesh.position), vector_scale(c.direction, c.length/2));\n        let sphere = createSphere();\n        sphere.position.set(...position);\n\n        if (numPipes < MAX_PIPES - 1) {\n          numPipes++;\n          numSegments = 0;\n          newPipe(initialPositions[numPipes]);\n        } else {\n          init();\n        }\n      }\n\n      if (rotateCamera) {\n        theta += omega;\n        updateCamera();\n      }\n\n      renderer.render(scene, camera);\n    }\n\n    const newPipe = function(position) {\n      c = {\n        length: 0,\n        direction: newDirection([0, 0, 0], position),\n        max_length: randInt(3, 5),\n        mesh: createCylinder(),\n      };\n      rotateCylinder(c);\n      c.mesh.position.set(...position);\n\n      let s = createSphere();\n      s.position.set(...position);\n    }\n\n    const setScene = function() {\n      scene = new THREE.Scene();\n      camera = new THREE.PerspectiveCamera(75, bbox.width/bbox.height, 0.1, 1000);\n\n      updateCamera();\n\n      let light = new THREE.AmbientLight(0x404040, 3);\n      scene.add(light);\n\n      let pointLight = new THREE.PointLight(0x404040, 3, 0);\n      pointLight.position.set(L, L, L);\n      scene.add(pointLight);\n\n      renderer.render(scene, camera);\n    }\n\n    const init = function() {\n      setScene();\n\n      numSegments = 0;\n      numPipes = 0;\n\n      newPipe(initialPositions[0]);\n\n      cancelAnimationFrame(animationRequestId);\n\n      animate();\n    }\n\n    setScene();\n\n    d3.select(\"#pipes-container button[name=start]\").on(\"click\", init);\n    d3.select(\"#pipes-container input[name=toggle-rotate\").on(\"change\", () => rotateCamera = !rotateCamera)\n  }\n}\n\n// Downstream code is set up to display only functional components.\nexport default function PipesFn() { return <Pipes /> }\n","codeFilename":"pipes.jsx","hasReactComponent":true,"pinned":true,"title":"The Windows \"Pipes\" Screensaver","date":"2020-04-23","languages":["js","three.js"]}},"__N_SSG":true}