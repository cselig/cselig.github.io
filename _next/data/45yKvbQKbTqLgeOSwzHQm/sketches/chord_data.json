{"pageProps":{"sketchData":{"id":"chord_data","contentHtml":"<p>Whenever I listen to music I like trying to identify chord progressions and find common (or uncommon) patterns and changes.\nI recently came across the <a href=\"https://ddmal.music.mcgill.ca/research/The_McGill_Billboard_Project_(Chord_Analysis_Dataset)/\">McGill Billboard dataset</a>,\nwhich is a set of Billboard Top 40 songs from the 60s, 70s, and 80s annotated with structure and chord information. This led me to build\na little widget for creating 4-chord progressions.</p>\n<h2>Chord Bigrams</h2>\n<p>The chord picker is based on chord bigrams, which are just pairs of chords that appear one after the other in a song. For example, if I have this 4-chord\nprogression:</p>\n<p><strong>1maj</strong> -> <strong>5maj</strong> -> <strong>6min</strong> -> <strong>4maj</strong></p>\n<p>Then I can extract the following three chord bigrams:</p>\n<ul>\n<li><strong>1maj</strong> -> <strong>5maj</strong></li>\n<li><strong>5maj</strong> -> <strong>6min</strong></li>\n<li><strong>6min</strong> -> <strong>4maj</strong></li>\n</ul>\n<p>If this progression repeated there would also be the <strong>4maj</strong> -> <strong>1maj</strong> bigram.</p>\n<h2>Counting Bigrams</h2>\n<p>In the widget, chords are sorted by the frequency of the chord bigram with that chord and the previous one. So if I chose <strong>1maj</strong> as my\nfirst chord, the list of possibilities for chord 2 would be sorted based on how often a chord is observed to come after <strong>1maj</strong> in the dataset.\n(This is true for all but the first chord, where a small set of \"seed\" chords are listed.)</p>\n<p>This means if you're picking chords at the top of the list, your progression will sound more normal/conventional/diatonic. If you're picking chords\nnear the bottom of the list your progression could sound more distinctive, but it could also sound more disjointed or nonsensical.</p>\n<p>If you don't have an ear for chord progressions I suggest first plugging the progression above (which appears in <a href=\"https://www.youtube.com/watch?v=HTYrkOZ5nCs\">quite a few songs</a>)\ninto the widget below, hearing how it sounds, and then trying to modify it.</p>\n","code":"import React, { useState } from 'react'\nimport { CSSTransition } from \"react-transition-group\"\nimport { Clear, PlayArrow, Stop } from '@material-ui/icons';\n\n// MIDISounds uses the window object, which is not present server-side.\nimport dynamic from 'next/dynamic'\nconst MIDISounds = dynamic(() => import('midi-sounds-react'), { ssr: false })\n\nimport data from '../../data/chords/chord_to_successors.json'\n\nconst TONIC = 50\nconst TEMPO = 120\n\nconst CHORD_SHAPES = {\n  \"maj\":  [0, 4, 7],\n  \"maj7\": [0, 4, 7, 10],\n  \"min\":  [0, 3, 7],\n  \"sus\":  [0, 5, 7],\n  \"dim\":  [0, 3, 6, 9],\n  \"aug\":  [0, 4, 8],\n}\nlet CHORDS = {}\nfor (const [name, notes] of Object.entries(CHORD_SHAPES)) {\n  CHORDS[name] = notes.map(note => note + TONIC)\n}\nconst OFFSETS = {\n  \"b7\": -2,\n  \"7\":  -1,\n  \"1\":  0,\n  \"b2\": 1,\n  \"2\":  2,\n  \"b3\": 3,\n  \"3\":  4,\n  \"4\":  5,\n  \"5\":  7,\n  \"b6\": 8,\n  \"6\":  9,\n}\n\nconst TRANSITION_TIME = 300 // ms\n\nconst ChordList = ({chords, onSelect, inProp}) => {\n  const [height, setHeight] = useState(0)\n  return (\n    <CSSTransition\n      in={inProp}\n      appear={true}\n      timeout={1000}\n      onEntering={() => setHeight(40 * chords.length)}\n      onExit={() => setHeight(0)}\n    >\n      <div className=\"chords\" style={{height: height}}>\n        {/* chords *should* be unique */}\n        {chords.map((chord, i) => {\n          const [startOpacity, endOpacity] = [1, 0.3]\n          let opacity\n          if (chords.length === 2) {\n            // hack - don't want a gradient for picking the first chord\n            opacity = 1\n          } else {\n            opacity = startOpacity + (i / chords.length) * (endOpacity - startOpacity)\n          }\n\n          return (\n            <p\n              className=\"chord\"\n              chord={chord}\n              onClick={onSelect}\n              style={{opacity: opacity}}\n              key={chord}\n            >{chord}</p>)\n        })}\n        <style jsx>{`\n          .chords {\n            display: flex;\n            flex-direction: column;\n            align-items: center;\n            transition: height ${TRANSITION_TIME}ms;\n            overflow: hidden;\n          }\n\n          .chord {\n            cursor: pointer;\n            margin: 0.5em;\n          }\n        `}</style>\n      </div>\n    </CSSTransition>\n  )\n}\n\nconst NextChordPicker = ({data, onSelect, inProp}) => {\n  let chords = []\n  for (const chord in data) {\n    chords.push([chord, data[chord]])\n  }\n  chords.sort((a, b) => b[1] - a[1])\n  chords = chords.map((x) => x[0])\n  return (\n    <div className=\"next-chord-picker\">\n      <ChordList chords={chords} onSelect={onSelect} inProp={inProp} />\n    </div>\n  )\n}\n\nconst FirstChordPicker = ({onSelect, inProp}) => (\n  <div className=\"first-chord-picker\">\n    <ChordList chords={[\"1maj\", \"1min\", \"2min\", \"4maj\", \"5maj\"]} onSelect={onSelect} inProp={inProp} />\n  </div>\n)\n\nconst ProgressionDisplay = ({chords, active, onSelect, listInProp}) => {\n  chords = [...chords]\n  const active_index = chords.length\n  const pad = 4 - chords.length\n  for (let i = 0; i < pad; i++) { chords.push(\"?\") }\n\n  return (\n    <div className=\"progression-display\">\n      {chords.map((chord, i) => {\n        return (\n          <div key={i}>\n            <p className={\"progression-chord \" + (chord !== \"?\" ? \"selected\" : \"\")}>{chord}</p>\n            {active_index === 0 && i === 0 && active &&\n              <FirstChordPicker onSelect={onSelect} inProp={listInProp} />}\n            {active_index === i && i > 0 && active &&\n              <NextChordPicker data={data[chords[i - 1]]} onSelect={onSelect} inProp={listInProp} />}\n          </div>\n        )\n      })}\n      <style jsx>{`\n        .progression-display {\n          display: flex;\n          opacity: 1;\n        }\n\n        .progression-chord {\n          margin: 1em;\n          padding: 0.5em;\n          border: 1px solid black;\n          border-radius: 0.5em;\n          width: 3em;\n          text-align: center;\n          transition: opacity ${TRANSITION_TIME}ms;\n        }\n\n        .progression-chord:not(.selected) {\n          opacity: 0.3;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nconst Text = ({clickable, text, onClick, inProp}) => {\n  return (\n    <CSSTransition\n      in={inProp}\n      appear={true}\n      timeout={TRANSITION_TIME}\n    >\n      <div\n        className={\"text \" + (clickable ? \"clickable\" : \"\")}\n        onClick={onClick}\n      >\n        <p>{text}</p>\n        <style jsx>{`\n          .text {\n            font-weight: 400;\n            height: 2em;\n            margin: 0.5em;\n            transition: opacity ${TRANSITION_TIME}ms;\n          }\n\n          .clickable {\n            cursor: pointer;\n          }\n\n          .enter {\n            opacity: 0;\n          }\n\n          .enter-active, .enter-done {\n            opacity: 1;\n          }\n\n          .exit-active, .exit-done {\n            opacity: 0;\n          }\n\n          p {\n            font-size: 1.5em;\n            margin: 0;\n          }\n        `}</style>\n      </div>\n    </CSSTransition>\n  )\n}\n\nclass ChordPicker extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      chords: [],\n      started: false,\n      textInProp: true,\n      listInProp: false\n    }\n  }\n\n  render() {\n    const resetChords = () => {\n      this.midiSounds.stopPlayLoop()\n      this.setState({chords: [], textInProp: true})\n    }\n\n    const chordToNotes = (chord) => {\n      let offsetLen\n      if (chord.startsWith(\"b\")) {\n        offsetLen = 2\n      } else {\n        offsetLen = 1\n      }\n      const offset = chord.substring(0, offsetLen)\n      const shape = chord.substring(offsetLen, chord.length)\n      return CHORDS[shape].map(x => x + OFFSETS[offset])\n    }\n\n    const playChords = () => {\n      if (this.state.chords.length == 0) return\n      const beat = this.state.chords.map((chord) => [\n        [], // drums\n        [\n          [3, chordToNotes(chord), 1]\n        ]\n      ])\n      this.midiSounds.startPlayLoop(beat, TEMPO, 1)\n    }\n\n    const selectChord = (e) => {\n      const chord = e.target.getAttribute(\"chord\")\n      this.setState({listInProp: false})\n      if (this.state.chords.length === 3) {\n        this.setState({textInProp: false})\n      }\n\n      setTimeout(\n        () => {\n          this.setState(\n            (oldState) => { return {chords: oldState.chords.concat([chord]), listInProp: true} },\n            () => {\n              if (this.midiSounds.loopStarted) {\n                this.midiSounds.stopPlayLoop()\n                playChords()\n              }\n            }\n          )\n        },\n        TRANSITION_TIME\n      )\n\n    }\n\n    const clear_enabled = this.state.chords.length > 0\n    const play_enabled = this.state.chords.length === 4\n    const stop_enabled = this.state.chords.length === 4\n\n    let text\n    if (!this.state.started) {\n      text = \"Click to start!\"\n    } else if (this.state.chords.length === 0) {\n      text = \"Pick your first chord\"\n    } else if (this.state.chords.length < 4) {\n      text = \"Pick your next chord\"\n    } else {\n      text = \"\"\n    }\n    let textOnClick\n    if (this.state.started) {\n      textOnClick = undefined\n    } else {\n      textOnClick = () => {\n        this.setState({textInProp: false})\n        setTimeout(\n          () => this.setState({started: true, textInProp: true, listInProp: true}),\n          TRANSITION_TIME\n        )\n      }\n    }\n\n    const iconSize = \"30px\"\n\n    return (\n      <div id=\"chord-picker\">\n        <MIDISounds\n          ref={(ref) => (this.midiSounds = ref)}\n          appElementName=\"__next\"\n          instruments={[3]}\n        />\n\n        <Text\n          text={text}\n          onClick={textOnClick}\n          clickable={!this.state.started}\n          inProp={this.state.textInProp}\n        />\n\n        <div className=\"controls\">\n          <span\n            className={\"button \" + (clear_enabled ? \"enabled\" : \"disabled\")}\n            onClick={clear_enabled ? resetChords : undefined}\n           ><Clear fontSize=\"inherit\" /></span>\n          <span\n            className={\"button material-icons-outlined \" + (play_enabled ? \"enabled\" : \"disabled\")}\n            onClick={play_enabled ? playChords : undefined}\n          ><PlayArrow fontSize=\"inherit\" /></span>\n          <span\n            className={\"button material-icons-outlined \" + (stop_enabled ? \"enabled\" : \"disabled\")}\n            onClick={stop_enabled ? () => this.midiSounds.stopPlayLoop() : undefined}\n          ><Stop fontSize=\"inherit\" /></span>\n        </div>\n\n        <ProgressionDisplay\n          chords={this.state.chords}\n          active={this.state.started}\n          onSelect={selectChord}\n          listInProp={this.state.listInProp}\n        />\n      <style jsx>{`\n        #chord-picker {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          margin-top: 5em;\n          min-height: 750px;\n        }\n\n        .button {\n          font-size: 30px;\n          margin: 4px;\n          cursor: pointer;\n          transition: opacity ${TRANSITION_TIME}ms;\n        }\n\n        .button.enabled {\n          opacity: 1;\n        }\n\n        .button.disabled {\n          opacity: 0.3;\n        }\n\n        // doesn't work\n        .MIDISounds {\n          display: none;\n        }\n      `}</style>\n      </div>\n    )\n  }\n}\n\nexport default function ChordPickerFn() { return <ChordPicker /> }\n","codeFilename":"chord_data.jsx","hasReactComponent":true,"pinned":false,"title":"Data-driven Chord Progressions","date":"2020-10-25","languages":["js","react"]}},"__N_SSG":true}