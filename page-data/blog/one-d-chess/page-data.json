{
    "componentChunkName": "component---src-templates-post-js",
    "path": "/blog/one-d-chess",
    "result": {"data":{"mdx":{"body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"title\": \"1D Chess\",\n  \"date\": \"2021-03-11T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"I was recently watching a YouTube video about a one-dimensional chess variant and thought it would be fun to implement.\\nYou can check out the completed code \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/cselig/cselig.github.io/blob/develop/content/blog/one_d_chess\"\n  }, \"here\"), \".\"), mdx(\"p\", null, \"It turns out there are a number of different 1D chess variants, but in this specific one the board is 8 squares long and each side\\nonly has a king, knight, and rook.\\nPiece movement is similar to regular chess except for the knight, which can move two squares in either direction (and hop\\nover pieces). Capturing pieces, stalemate, check, and checkmate all work the same as in normal chess.\"), mdx(\"p\", null, \"Below you can play as the white pieces against an AI I programmed. Click on a piece and grey dots will appear to show\\nthat piece's legal moves. Clicking on a square with a grey dot will move the piece to that square.\"), mdx(\"p\", null, \"It turns out that white has a forced win from the very beginning - can you find it? Be careful not to concede a stalemate!\"), mdx(OneDChess, {\n    mdxType: \"OneDChess\"\n  }), mdx(\"div\", {\n    id: \"unlockable-text\",\n    className: \"hidden\"\n  }, \"Well done - you're now a 1D chess master! \\uD83C\\uDF89\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"1D Chess","draft":null},"fields":{"slug":"one-d-chess"}}},"pageContext":{"slug":"one-d-chess"}},
    "staticQueryHashes": ["2999498863"]}