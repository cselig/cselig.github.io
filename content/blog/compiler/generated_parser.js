/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var generated_parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[5,7],$V2=[12,16],$V3=[1,22],$V4=[20,26],$V5=[1,27],$V6=[1,33],$V7=[1,30],$V8=[1,40],$V9=[1,31],$Va=[1,32],$Vb=[1,34],$Vc=[1,35],$Vd=[1,36],$Ve=[1,37],$Vf=[1,38],$Vg=[1,39],$Vh=[1,41],$Vi=[1,42],$Vj=[1,43],$Vk=[1,44],$Vl=[2,45],$Vm=[1,47],$Vn=[1,48],$Vo=[1,49],$Vp=[1,50],$Vq=[1,51],$Vr=[1,52],$Vs=[1,53],$Vt=[1,54],$Vu=[12,20,26,29,35,36,37,39,40,45,47,52,53,54,55,57,58,59,65,66],$Vv=[12,20,26,29,35,36,37,39,40,45,47,65],$Vw=[12,20,26,29,35,36,37,39,40,45,47,52,53,65],$Vx=[12,20,26,29,35,36,37,39,40,45,47,52,53,54,55,65],$Vy=[10,12,16,17,34,38,42,46,50,51,56,60,61,62,63,64],$Vz=[26,45],$VA=[16,49];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"program":3,"program_repetition_plus0":4,"EOF":5,"class":6,"CLASS":7,"TYPE":8,"class_option0":9,"{":10,"class_repetition0":11,"}":12,"inherits":13,"INHERITS":14,"feature":15,"ID":16,"(":17,"feature_option0":18,"feature_repetition0":19,")":20,":":21,"expr":22,"formal":23,"feature_option1":24,"comma_formal":25,",":26,"<-":27,"expr_option0":28,".":29,"expr_option1":30,"expr_repetition0":31,"expr_option2":32,"expr_repetition1":33,"IF":34,"THEN":35,"ELSE":36,"FI":37,"WHILE":38,"LOOP":39,"POOL":40,"expr_repetition_plus2":41,"LET":42,"expr_option3":43,"expr_repetition3":44,"IN":45,"CASE":46,"OF":47,"expr_repetition_plus4":48,"ESAC":49,"NEW":50,"ISVOID":51,"+":52,"-":53,"*":54,"/":55,"~":56,"<":57,"<=":58,"=":59,"NOT":60,"STRING":61,"INTEGER":62,"TRUE":63,"FALSE":64,";":65,"@":66,"expr_repetition3_option0":67,"=>":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"CLASS",8:"TYPE",10:"{",12:"}",14:"INHERITS",16:"ID",17:"(",20:")",21:":",26:",",27:"<-",29:".",34:"IF",35:"THEN",36:"ELSE",37:"FI",38:"WHILE",39:"LOOP",40:"POOL",42:"LET",45:"IN",46:"CASE",47:"OF",49:"ESAC",50:"NEW",51:"ISVOID",52:"+",53:"-",54:"*",55:"/",56:"~",57:"<",58:"<=",59:"=",60:"NOT",61:"STRING",62:"INTEGER",63:"TRUE",64:"FALSE",65:";",66:"@",68:"=>"},
productions_: [0,[3,2],[6,6],[13,2],[15,10],[15,2],[25,2],[23,3],[22,3],[22,8],[22,5],[22,7],[22,5],[22,3],[22,8],[22,5],[22,2],[22,2],[22,3],[22,3],[22,3],[22,3],[22,2],[22,3],[22,3],[22,3],[22,2],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[4,2],[4,3],[9,0],[9,1],[11,0],[11,3],[18,0],[18,1],[19,0],[19,2],[24,0],[24,2],[28,0],[28,2],[30,0],[30,1],[31,0],[31,3],[32,0],[32,1],[33,0],[33,3],[41,2],[41,3],[43,0],[43,2],[67,0],[67,2],[44,0],[44,6],[48,6],[48,7]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
      return {nodeType: 'program', classes: $$[$0-1]};
    
break;
case 2:

      this.$ = {
        nodeType: 'class', className: $$[$0-4], features: $$[$0-1], type: $$[$0-4],
        classParent: $$[$0-3],
      }
    
break;
case 3: case 6:

      this.$ = $$[$0]
    
break;
case 4:

      params = []
      if ($$[$0-7] != undefined) params.push($$[$0-7])
      params = params.concat($$[$0-6])
      this.$ = {nodeType: 'method', name: $$[$0-9], body: $$[$0-1], params: params}
    
break;
case 5:

      this.$ = {nodeType: 'attribute', name: $$[$0-1].name, type: $$[$0-1].type}
    
break;
case 7:

      this.$ = {nodeType: 'formal', name: $$[$0-2], type: $$[$0]}
    
break;
case 11:

      this.$ = {nodeType: 'expression', expressionType: 'if'}
    
break;
case 18:

    this.$ = {nodeType: 'expression', operator: '+', lhs: $$[$0-2], rhs: $$[$0]}
  
break;
case 28:

    this.$ = {nodeType: 'identifier', value: $$[$0]}
  
break;
case 33: case 55:
this.$ = [$$[$0-1]];
break;
case 34: case 38: case 50: case 54: case 56:
$$[$0-2].push($$[$0-1]);
break;
case 37: case 41: case 49: case 53: case 61:
this.$ = [];
break;
case 42:
$$[$0-1].push($$[$0]);
break;
case 62:
$$[$0-5].push($$[$0-4]);
break;
case 63:
this.$ = [$$[$0-5]];
break;
case 64:
$$[$0-6].push($$[$0-5]);
break;
}
},
table: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5],6:6,7:$V0},{65:[1,7]},{8:[1,8]},{1:[2,1]},{65:[1,9]},o($V1,[2,33]),{9:10,10:[2,35],13:11,14:[1,12]},o($V1,[2,34]),{10:[1,13]},{10:[2,36]},{8:[1,14]},o($V2,[2,37],{11:15}),{10:[2,3]},{12:[1,16],15:17,16:[1,18],23:19},{65:[2,2]},{65:[1,20]},{17:[1,21],21:$V3},{24:23,27:[1,24],65:[2,43]},o($V2,[2,38]),o($V4,[2,39],{18:25,23:26,16:$V5}),{8:[1,28]},{65:[2,5]},{10:$V6,16:$V7,17:$V8,22:29,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($V4,[2,41],{19:45}),o($V4,[2,40]),{21:$V3},o([20,26,27,65],[2,7]),{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,65:[2,44],66:$Vt},o($Vu,[2,28],{17:[1,56],27:[1,55]}),{10:$V6,16:$V7,17:$V8,22:57,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:58,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:60,34:$V9,38:$Va,41:59,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{16:[1,61]},{10:$V6,16:$V7,17:$V8,22:62,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{8:[1,63]},{10:$V6,16:$V7,17:$V8,22:64,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:65,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:66,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:67,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($Vu,[2,29]),o($Vu,[2,30]),o($Vu,[2,31]),o($Vu,[2,32]),{20:[1,68],25:69,26:[1,70]},{29:[1,71]},{10:$V6,16:$V7,17:$V8,22:72,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:73,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:74,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:75,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:76,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:77,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:78,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{8:[1,79]},{10:$V6,16:$V7,17:$V8,22:80,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($V4,[2,51],{32:81,22:82,10:$V6,16:$V7,17:$V8,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk}),{28:46,29:$Vl,35:[1,83],52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt},{28:46,29:$Vl,39:[1,84],52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt},{10:$V6,12:[1,85],16:$V7,17:$V8,22:86,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,65:[1,87],66:$Vt},{21:[1,88]},{28:46,29:$Vl,47:[1,89],52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt},o($Vu,[2,16]),o($Vv,[2,17],{28:46,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($Vv,[2,22],{28:46,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($Vv,[2,26],{28:46,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),{20:[1,90],28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt},{21:[1,91]},o($V4,[2,42]),{16:$V5,23:92},{16:[1,93]},o($Vw,[2,18],{28:46,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($Vw,[2,19],{28:46,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($Vx,[2,20],{28:46,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($Vx,[2,21],{28:46,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($Vv,[2,23],{28:46,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($Vv,[2,24],{28:46,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($Vv,[2,25],{28:46,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),{29:[2,46]},o($Vv,[2,8],{28:46,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($V4,[2,53],{33:94}),o($V4,[2,52],{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),{10:$V6,16:$V7,17:$V8,22:95,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:96,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($Vu,[2,13]),{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,65:[1,97],66:$Vt},o($Vy,[2,55]),{8:[1,98]},{16:[1,100],48:99},o($Vu,[2,27]),{8:[1,101]},o($V4,[2,6]),{17:[1,102]},{20:[1,103],26:[1,104]},{28:46,29:$Vl,36:[1,105],52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt},{28:46,29:$Vl,40:[1,106],52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt},o($Vy,[2,56]),o($Vz,[2,57],{43:107,27:[1,108]}),{16:[1,110],49:[1,109]},{21:[1,111]},{10:[1,112]},o($V4,[2,47],{30:113,22:114,10:$V6,16:$V7,17:$V8,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk}),o($Vu,[2,10]),{10:$V6,16:$V7,17:$V8,22:115,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{10:$V6,16:$V7,17:$V8,22:116,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($Vu,[2,12]),o($Vz,[2,61],{44:117}),{10:$V6,16:$V7,17:$V8,22:118,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($Vu,[2,15]),{21:[1,119]},{8:[1,120]},{10:$V6,16:$V7,17:$V8,22:121,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($V4,[2,49],{31:122}),o($V4,[2,48],{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),o($V4,[2,54],{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),{28:46,29:$Vl,37:[1,123],52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt},{26:[1,125],45:[1,124]},o($Vz,[2,58],{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),{8:[1,126]},{68:[1,127]},{12:[1,128],28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt},{20:[1,129],26:[1,130]},o($Vu,[2,11]),{10:$V6,16:$V7,17:$V8,22:131,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{16:[1,132]},{68:[1,133]},{10:$V6,16:$V7,17:$V8,22:134,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{65:[2,4]},o($Vu,[2,9]),{10:$V6,16:$V7,17:$V8,22:135,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($Vv,[2,14],{28:46,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),{21:[1,136]},{10:$V6,16:$V7,17:$V8,22:137,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,65:[1,138],66:$Vt},o($V4,[2,50],{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt}),{8:[1,139]},{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,65:[1,140],66:$Vt},o($VA,[2,63]),o($Vz,[2,59],{67:141,27:[1,142]}),o($VA,[2,64]),o($Vz,[2,62]),{10:$V6,16:$V7,17:$V8,22:143,34:$V9,38:$Va,42:$Vb,46:$Vc,50:$Vd,51:$Ve,56:$Vf,60:$Vg,61:$Vh,62:$Vi,63:$Vj,64:$Vk},o($Vz,[2,60],{28:46,29:$Vl,52:$Vm,53:$Vn,54:$Vo,55:$Vp,57:$Vq,58:$Vr,59:$Vs,66:$Vt})],
defaultActions: {5:[2,1],11:[2,36],14:[2,3],16:[2,2],23:[2,5],79:[2,46],128:[2,4]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

let allClasses = []
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 65
break;
case 2:return 10
break;
case 3:return 12
break;
case 4:return 17
break;
case 5:return 20
break;
case 6:return 21
break;
case 7:return 26
break;
case 8:return 66
break;
case 9:return 29
break;
case 10:return 52
break;
case 11:return 53
break;
case 12:return "*"
break;
case 13:return 55
break;
case 14:return 56
break;
case 15:return 27
break;
case 16:return 57
break;
case 17:return 58
break;
case 18:return 59
break;
case 19:return 7
break;
case 20:return 14
break;
case 21:return 34
break;
case 22:return 35
break;
case 23:return 36
break;
case 24:return 37
break;
case 25:return 38
break;
case 26:return 39
break;
case 27:return 40
break;
case 28:return 42
break;
case 29:return 45
break;
case 30:return 46
break;
case 31:return 47
break;
case 32:return 49
break;
case 33:return 51
break;
case 34:return 50
break;
case 35:return 60
break;
case 36:return 8
break;
case 37:return 16
break;
case 38:return 61
break;
case 39:return 62
break;
case 40:return 63
break;
case 41:return 64
break;
case 42:return 5
break;
}
},
rules: [/^(?:\s+)/,/^(?:;)/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?::)/,/^(?:,)/,/^(?:@)/,/^(?:\.)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:~)/,/^(?:<-)/,/^(?:<)/,/^(?:<=)/,/^(?:=)/,/^(?:class\b)/,/^(?:inherits\b)/,/^(?:if\b)/,/^(?:then\b)/,/^(?:else\b)/,/^(?:fi\b)/,/^(?:while\b)/,/^(?:loop\b)/,/^(?:pool\b)/,/^(?:let\b)/,/^(?:in\b)/,/^(?:case\b)/,/^(?:of\b)/,/^(?:esac\b)/,/^(?:isvoid\b)/,/^(?:new\b)/,/^(?:not\b)/,/^(?:[A-Z][a-zA-Z0-9_]*)/,/^(?:[a-z][a-zA-Z0-9_]*)/,/^(?:".+")/,/^(?:[0-9]+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = generated_parser;
exports.Parser = generated_parser.Parser;
exports.parse = function () { return generated_parser.parse.apply(generated_parser, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}